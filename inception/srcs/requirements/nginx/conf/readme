listen 443 ssl; ssl_protocols TLSv1.2 TLSv1.3;
This configuration tells NGINX to listen for incoming connections on port 443 (the standard port for HTTPS) and explicitly enables SSL/TLS for this port. It also specifies that only TLS versions 1.2 and 1.3 are allowed for secure connections. This is a secure and recommended configuration, ensuring that the server only uses the more secure versions of TLS.

Always specify the ssl keyword when configuring HTTPS servers to ensure SSL/TLS is enabled for that server block.
Explicitly setting ssl_protocols to TLSv1.2 TLSv1.3 is considered a best practice to avoid using older, less secure versions of TLS.

Components of the try_files Directive
$uri: Represents the requested URI. NGINX will first attempt to serve the file that matches the requested URI exactly.
$uri/: Indicates that if the exact $uri match is not a file but a directory, NGINX should attempt to serve the directory's index file (based on the index directive settings, like index index.html;).
/index.php$is_args$args: This is the fallback if neither the specific file ($uri) nor the directory ($uri/) can be served. It tells NGINX to forward the request to index.php, passing the original query arguments. Here's what each component means:
/index.php: The script file to execute as the final fallback.
$is_args: A variable that outputs a "?" if the request URI contains query arguments, making the transition between the script and the arguments.
$args: Represents the query string parameters from the original request.
How It Works
When a request comes in, NGINX does the following according to the try_files line:

Looks for an Exact Match: Tries to find a file that matches the requested URI.
Tries to Serve a Directory: If the exact match is a directory, NGINX looks for an index file in that directory to serve.
Falls Back to index.php: If neither an exact file match nor a directory index file is found, NGINX forwards the request to index.php, effectively treating the request as a query to a PHP script. This behavior is typical in WordPress and other PHP-based applications, allowing pretty permalinks and front-controller patterns to work without needing to have physical .php files for every route.