# WordPress Service Directory

Contains the Dockerfile for the WordPress service, potentially including scripts or configurations.

- `Dockerfile`: Defines how to build the WordPress + php-fpm Docker image.

Examples : 

```
FROM debian:buster

RUN apt-get update && apt-get upgrade -y
RUN apt-get install -y wget curl php7.3 php7.3-fpm php-mysql mariadb-client

RUN wget https://fr.wordpress.org/wordpress-6.2.2-fr_FR.tar.gz -P /var/www
RUN cd /var/www && tar -xzf wordpress-6.2.2-fr_FR.tar.gz && rm wordpress-6.2.2-fr_FR.tar.gz

RUN	chown -R root:root /var/www/wordpress

#RUN rm /var/www/wordpress/wp-config.php

RUN wget https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar

RUN chmod +x wp-cli.phar
RUN mv wp-cli.phar /usr/local/bin/wp

COPY conf/www.conf /etc/php/7.3/fpm/pool.d/

COPY conf/script.sh /

COPY conf/wp-config.php /var/www/wordpress/wp-config.php

CMD ["bash", "/script.sh"]
```

```
FROM debian:buster

RUN apt-get update && apt-get -y install \
	wget \
	curl \
	bash \
	php \
	php-cgi \
	php-mysql \
	php-fpm \
	php-pdo \
	php-gd php-cli \
	php-mbstring \
	redis \
	php-redis \
	&& rm -rf /var/lib/apt/lists/*

# I need to install wp_cli command and put it in the right directory /usr/local/bin
RUN curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar \
  && chmod +x wp-cli.phar \
  && mv wp-cli.phar /usr/local/bin/wp

# Copy the .conf in the html directory
COPY ./conf/www.conf /etc/php/7.3/fpm/pool.d/

#Create the folder to enable php start
RUN mkdir /run/php

#we copy the script, give the right to launch it in local on our computer
COPY ./tools/create_wordpress.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/create_wordpress.sh
ENTRYPOINT ["/usr/local/bin/create_wordpress.sh"]

#We go the html directory
WORKDIR /var/www/html/

#We expose the 9000 port
EXPOSE 9000

#Launch PHP FPM in foreground and ignore deamonize from conf file (-F)
CMD ["/usr/sbin/php-fpm7.3", "-F"]

```

Both Dockerfile examples are designed to create a WordPress environment using Debian Buster as the base image. They share similarities but also have some differences in their approaches and configurations. Let's break them down and evaluate which choices might fit your project better, especially considering the subject's requirements.

First Example Explanation:
Base Image: Uses debian:buster. It's a common choice for stability and compatibility.
Package Installation: Installs PHP, PHP extensions, and Redis, indicating a desire for caching capabilities (php-redis). The rm -rf /var/lib/apt/lists/* cleans up the apt cache to reduce the image size.
WP-CLI Installation: Downloads and installs WP-CLI, a command-line tool for managing WordPress, indicating an approach that favors command-line management.
Configuration Copy: Copies a custom PHP FPM pool configuration (www.conf), allowing for specific PHP process management settings.
Script Execution: Copies and grants execution rights to a custom script (create_wordpress.sh) designed to configure WordPress, which is set as the ENTRYPOINT, indicating it runs at container startup.
Working Directory: Sets /var/www/html/ as the working directory, a standard directory for web content in Debian-based distributions.
Expose Port: Exposes port 9000, indicating that PHP-FPM listens on this port for incoming connections from NGINX.
Foreground Execution: The CMD directive runs PHP-FPM in the foreground with -F, which is crucial for Docker containers to stay up as they need a foreground process.
Second Example Explanation:
Base and Package Installation: Similar to the first, but includes an apt-get upgrade -y, which ensures all packages are updated. This could increase build time and size.
WordPress Download: Directly downloads and extracts WordPress into /var/www, skipping the need for WP-CLI for the initial WordPress setup.
Ownership Change: Changes ownership of the WordPress directory to root:root, which is unusual as it might restrict WordPress from writing to its own directories (e.g., for updates or uploads).
WP-CLI Installation: Similar approach to installing WP-CLI.
Configuration and Script Copy: Similar approach to copying PHP FPM configuration and a custom script but uses bash to execute a script (/script.sh) as the CMD, which could be used for final configurations or to start PHP-FPM.
Differences and Choices for Your Project:
WP-CLI: Both examples use WP-CLI, which aligns with the subject's requirements for managing WordPress via command line. This tool is valuable for automating WordPress tasks.
Redis: The first example includes Redis and the php-redis extension, suggesting an intent to use Redis for caching. If caching is part of your project's requirements (e.g., for a bonus part), including Redis might be beneficial.
Direct WordPress Download vs. WP-CLI for Setup: The second example downloads WordPress directly, while the first seems to rely on a script possibly using WP-CLI for setup. Using WP-CLI might offer more flexibility for configuring WordPress, especially if you want to automate the setup process with scripts.
Ownership and Permissions: The second example sets the WordPress directory ownership to root:root, which might not be ideal. Typically, you'd set the ownership to the web server's user or another user with appropriate permissions.
Foreground Execution: The first example explicitly runs PHP-FPM in the foreground, which is necessary for the container to stay running. Ensure your startup script in the second example also starts PHP-FPM in the foreground.
Recommendation for Your Project:
Considering the subject's requirements, the first example might be more aligned due to its comprehensive setup, including Redis for potential caching and the explicit foreground execution of PHP-FPM, which ensures the container remains running. However, the choice between direct WordPress download or using WP-CLI for setup can depend on your preference for automation versus direct control.

For integrating with NGINX and using docker-compose, ensure:

Your WordPress container exposes port 9000 for NGINX to proxy PHP requests.
You include volume mappings for persistent WordPress content and ensure proper permissions.
You adapt the nginx.conf to proxy requests to the WordPress container, using the service name defined in docker-compose.yml as the hostname in the fastcgi_pass directive.
This setup will allow you to test WordPress independently and then integrate it seamlessly with NGINX for a complete web serving environment.